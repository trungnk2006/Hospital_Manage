const { Op } = require('sequelize');
const handleExceptions = require("../utils/handleExceptions");
const lichKham = require("../model/lichKham");

const { ThongTinCaNhan } = require('../model');

// T·∫°o l·ªãch kh√°m m·ªõi
const createAppointment = async (req, res) => {
  try {
    const { ngay, gio, benhNhanId, bacSiId } = req.body.lichKham;

    const benhNhan = await ThongTinCaNhan.findByPk(benhNhanId);
    const bacSi = await ThongTinCaNhan.findByPk(bacSiId);

    if (!benhNhan || !bacSi) {
      return handleExceptions(500, 'Kh√¥ng t√¨m th·∫•y b·ªánh nh√¢n ho·∫∑c b√°c sƒ©!', res);
    }

    const newOrder = await lichKham.create({
      ngay,
      gio,
      benhNhanId,
      bacSiId
    });

    const findOrder = await lichKham.findOne({
      where: { id: newOrder.id },
      include: [
        { model: ThongTinCaNhan, as: "benhNhan" },
        { model: ThongTinCaNhan, as: "bacSi" },
      ],
    });

    res.json({
      lichKham: { ...findOrder.dataValues },
      message: "Th√†nh c√¥ng!",
    });
  } catch (e) {
    handleExceptions(500, e.message, res);
  }
};

// X√≥a l·ªãch kh√°m
const deleteAppointment = async (req, res) => {
  try {
    const { id } = req.body.lichKham;

    await lichKham.destroy({
      where: { id },
    });

    res.json({
      message: "Th√†nh c√¥ng",
    });
  } catch (e) {
    handleExceptions(500, e.message, res);
  }
};

// L·∫•y tr·∫°ng th√°i l·ªãch kh√°m h√¥m nay theo b√°c sƒ©
const getLichTrangThai = async (req, res) => {
  try {
    const bacSiId = parseInt(req.params.bacSiId);

    const caSang = await lichKham.findOne({
      where: { bacSiId, gio: 'S√°ng' }
    });

    const caChieu = await lichKham.findOne({
      where: { bacSiId, gio: 'Chi·ªÅu' }
    });

    res.json({
      sang: {
        id: caSang?.id || null,
        daDat: !!(caSang && caSang.benhNhanId)
      },
      chieu: {
        id: caChieu?.id || null,
        daDat: !!(caChieu && caChieu.benhNhanId)
      }
    });
  } catch (err) {
    console.error('üî• L·ªói getLichTrangThai:', err);
    res.status(500).json({ message: 'L·ªói server khi l·∫•y tr·∫°ng th√°i l·ªãch kh√°m' });
  }
};

// get id for l·ªãch kh√°m 
const getLichKhamById = async (req, res) => {
  try {
    const id = parseInt(req.params.id);

    const item = await lichKham.findOne({
      where: { id },
      include: [
        { model: ThongTinCaNhan, as: "benhNhan" }
      ]
    });

  

    res.json(item);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y l·ªãch kh√°m theo ID:", error);
    res.status(500).json({ message: "L·ªói server khi l·∫•y l·ªãch kh√°m" });
  }
};

//r·∫øt benh nhan
const resetBenhNhanId = async (req, res) => {
  try {
    const { id } = req.params;

    const lich = await lichKham.findByPk(id);
    if (!lich) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch kh√°m." });
    }

    lich.benhNhanId = null;
    await lich.save();

    res.json({ message: "ƒê√£ reset benhNhanId v·ªÅ null." });
  } catch (error) {
    console.error("L·ªói khi reset benhNhanId:", error);
    res.status(500).json({ message: "L·ªói server khi reset l·ªãch kh√°m." });
  }
};


// Export
module.exports = {
  createAppointment,
  deleteAppointment,
  getLichTrangThai,
   getLichKhamById,
   resetBenhNhanId  
};
